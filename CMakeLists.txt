# Autogenerated by auto2cmake on 2022-07-27 21:08:01

# Options

cmake_minimum_required(VERSION 2.8...3.20)

project(GetFem)

cmake_policy(SET CMP0037 NEW)

set(MAJOR_VERSION "5")
set(MINOR_VERSION "4")
set(PATCH_VERSION "2")

set(GETFEM_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}")
set(GMM_VERSION "${GETFEM_VERSION}")

# Option to Enable AC_PYTHON_MPI4PY
option( AC_PYTHON_MPI4PY "Enable AC_PYTHON_MPI4PY" OFF )

# Option to the 64 bits integer blas and lapack support
option( BLAS64_SUPPORT "the 64 bits integer blas and lapack support" OFF )

# Option to the use of the blas call for basic algebra routines.
option( BLAS_INTERFACE "the use of the blas call for basic algebra routines." OFF )

# Option to the use of the qd library (some computation will be done with double-double precision, useful for high order FEMs)
option( DD "the use of the qd library (some computation will be done with double-double precision, useful for high order FEMs)" OFF )

# Option to experimental parts of the library
option( EXPERIMENTAL "experimental parts of the library" OFF )

# Option to Enable HAVE_VENDOR_BLAS
option( HAVE_VENDOR_BLAS "Enable HAVE_VENDOR_BLAS" OFF )

# Option to on/off matlab support
option( MATLAB "on/off matlab support" OFF )

# Option to Enable MATLAB_COM_EXT
option( MATLAB_COM_EXT "Enable MATLAB_COM_EXT" OFF )

# Option to use of RPCs for matlab interface
option( MATLAB_RPC "use of RPCs for matlab interface" OFF )

# Option to the use of the METIS library.
option( METIS "the use of the METIS library." OFF )

# Option to openblas to be multithreaded
option( MULTITHREAD_BLAS "openblas to be multithreaded" OFF )

# Option to the use of the (sequential) MUMPS library. A direct solver for large sparse linear systems.
option( MUMPS "the use of the (sequential) MUMPS library. A direct solver for large sparse linear systems." OFF )

# Option to on/off octave support
option( OCTAVE "on/off octave support" OFF )

# Option to Enable OCTAVE_COM_EXT
option( OCTAVE_COM_EXT "Enable OCTAVE_COM_EXT" OFF )

# Option to the multihreaded version of GetFEM
option( OPENMP "the multihreaded version of GetFEM" OFF )

# Option to the parallel version of GetFEM (use MPI and METIS)
option( PARALEVEL "the parallel version of GetFEM (use MPI and METIS)" OFF )

# Option to the use of the parrallel MUMPS library. A direct solver for large sparse linear systems.
option( PAR_MUMPS "the use of the parrallel MUMPS library. A direct solver for large sparse linear systems." OFF )

# Option to on/off python support
option( PYTHON "on/off python support" OFF )

# Option to the use of the qd library (some computation will be done with quad-double precision, useful for high order FEMs)
option( QD "the use of the qd library (some computation will be done with quad-double precision, useful for high order FEMs)" OFF )

# Option to the use of the qhull library (required for generation of non regular meshes)
option( QHULL "the use of the qhull library (required for generation of non regular meshes)" OFF )

# Option to on/off SuperLU support
option( SUPERLU "on/off SuperLU support" OFF )

# Option to Enable USEMATLAB
option( USEMATLAB "Enable USEMATLAB" OFF )

# Option to Enable USEMETIS
option( USEMETIS "Enable USEMETIS" OFF )

# Option to Enable USEMUMPS
option( USEMUMPS "Enable USEMUMPS" OFF )

# Option to Enable USEOCTAVE
option( USEOCTAVE "Enable USEOCTAVE" OFF )

# Option to Enable USEPYTHON
option( USEPYTHON "Enable USEPYTHON" OFF )

# Option to Enable USEQHULL
option( USEQHULL "Enable USEQHULL" OFF )

# The lines below will generate the config.h based on the options above
# The file will be in the ${CMAKE_BINARY_DIR} location
if( AC_PYTHON_MPI4PY )
    message(" AC_PYTHON_MPI4PY Enabled")
    # Enable AC_PYTHON_MPI4PY
    set(GETFEM_BUILDPYTHONPAR,1)
    set(GMM_BUILDPYTHONPAR,1)
endif( AC_PYTHON_MPI4PY )
if( BLAS64_SUPPORT )
    message(" BLAS64_SUPPORT Enabled")
    # the 64 bits integer blas and lapack support
    set(GETFEM_HAVE_BLAS64_SUPPORT,1)
    set(GMM_HAVE_BLAS64_SUPPORT,1)
endif( BLAS64_SUPPORT )
if( BLAS_INTERFACE )
    message(" BLAS_INTERFACE Enabled")
    # the use of the blas call for basic algebra routines.
    set(GETFEM_HAVE_BLAS_INTERFACE 1)
    set(GMM_HAVE_BLAS_INTERFACE 1)

    find_package(BLAS QUIET)
    if (BLAS_FOUND)
      message("-- Found BLAS library: ${BLAS_LIBRARIES}")
      add_definitions( "-DGMM_USES_BLAS" )
    else (BLAS_FOUND)
      message("-- Did not find BLAS library.")
    endif (BLAS_FOUND)

endif( BLAS_INTERFACE )
if( DD )
    message(" DD Enabled")
    # the use of the qd library some computation will be done with double-double precision useful for high order FEMs
    set(GETFEM_HAVE_DD,1)
    set(GMM_HAVE_DD 1)
endif( DD )
if( EXPERIMENTAL )
    message(" EXPERIMENTAL Enabled")
    # experimental parts of the library
    set(GETFEM_HAVE_EXPERIMENTAL,1)
    set(GMM_HAVE_EXPERIMENTAL 1)
endif( EXPERIMENTAL )
if( HAVE_VENDOR_BLAS )
    message(" HAVE_VENDOR_BLAS Enabled")
    # Enable HAVE_VENDOR_BLAS
    set(GETFEM_USEBLASLITE,1)
    set(GMM_USEBLASLITE,1)
endif( HAVE_VENDOR_BLAS )
if( MATLAB )
    message(" MATLAB Enabled")
    # on/off matlab support
    set(GETFEM_HAVE_MATLAB,1)
    set(GMM_HAVE_MATLAB,1)
endif( MATLAB )
if( MATLAB_COM_EXT )
    message(" MATLAB_COM_EXT Enabled")
    # Enable MATLAB_COM_EXT
    set(GETFEM_USE_MINGW_MEX,1)
    set(GMM_USE_MINGW_MEX,1)
endif( MATLAB_COM_EXT )
if( MATLAB_RPC )
    message(" MATLAB_RPC Enabled")
    # use of RPCs for matlab interface
    set(GETFEM_BUILDMEXRPC,1)
    set(GMM_BUILDMEXRPC,1)
endif( MATLAB_RPC )
if( METIS )
    message(" METIS Enabled")
    # the use of the METIS library.
    set(GETFEM_HAVE_METIS,1)
    set(GMM_HAVE_METIS,1)
endif( METIS )
if( MULTITHREAD_BLAS )
    message(" MULTITHREAD_BLAS Enabled")
    # openblas to be multithreaded
    set(GETFEM_HAVE_MULTITHREAD_BLAS,1)
    set(GMM_HAVE_MULTITHREAD_BLAS,1)
endif( MULTITHREAD_BLAS )
if( MUMPS )
    message(" MUMPS Enabled")
    # the use of the sequential MUMPS library. A direct solver for large sparse linear systems.
    set(GETFEM_HAVE_MUMPS,1)
    set(GMM_HAVE_MUMPS,1)
endif( MUMPS )
if( OCTAVE )
    message(" OCTAVE Enabled")
    # on/off octave support
    set(GETFEM_HAVE_OCTAVE,1)
    set(GMM_HAVE_OCTAVE,1)
endif( OCTAVE )
if( OCTAVE_COM_EXT )
    message(" OCTAVE_COM_EXT Enabled")
    # Enable OCTAVE_COM_EXT
    set(GETFEM_USE_MINGW_OCTAVE,1)
    set(GMM_USE_MINGW_OCTAVE,1)
endif( OCTAVE_COM_EXT )
if( OPENMP )
    message(" OPENMP Enabled")
    # the multihreaded version of GetFEM
    set(GETFEM_HAVE_OPENMP,1)
    set(GMM_HAVE_OPENMP,1)
endif( OPENMP )
if( PARALEVEL )
    message(" PARALEVEL Enabled")
    # the parallel version of GetFEM use MPI and METIS
    set(GETFEM_HAVE_PARALEVEL,1)
    set(GMM_HAVE_PARALEVEL,1)
endif( PARALEVEL )
if( PAR_MUMPS )
    message(" PAR_MUMPS Enabled")
    # the use of the parrallel MUMPS library. A direct solver for large sparse linear systems.
    set(GETFEM_HAVE_PAR_MUMPS,1)
    set(GMM_HAVE_PAR_MUMPS,1)
endif( PAR_MUMPS )
if( PYTHON )
    message(" PYTHON Enabled")
    # on/off python support
    set(GETFEM_HAVE_PYTHON,1)
    set(GMM_HAVE_PYTHON,1)
endif( PYTHON )
if( QD )
    message(" QD Enabled")
    # the use of the qd library some computation will be done with quad-double precision useful for high order FEMs
    set(GETFEM_HAVE_QD,1)
    set(GMM_HAVE_QD,1)
endif( QD )
if( QHULL )
    message(" QHULL Enabled")
    # the use of the qhull library required for generation of non regular meshes
    set(GETFEM_HAVE_QHULL,1)
    set(GMM_HAVE_QHULL,1)
endif( QHULL )
if( SUPERLU )
    message(" SUPERLU Enabled")
    # on/off SuperLU support
    set(GETFEM_HAVE_SUPERLU,1)
    set(GMM_HAVE_SUPERLU,1)

    find_package(SUPERLU QUIET)
    if (SUPERLU_FOUND)
      message("-- Found SUPERLU library: ${SUPERLU_LIBRARIES}")
    else (SUPERLU_FOUND)
      message("-- Did not find SUPERLU library.")
    endif (SUPERLU_FOUND)

    add_subdirectory( superlu )
endif( SUPERLU )
if( USEMATLAB )
    message(" USEMATLAB Enabled")
    # Enable USEMATLAB
    set(GETFEM_BUILDMEX,1)
    set(GMM_BUILDMEX,1)
endif( USEMATLAB )
if( USEMETIS )
    message(" USEMETIS Enabled")
    # Enable USEMETIS
    set(GETFEM_METIS,1)
    set(GMM_METIS,1)
endif( USEMETIS )
if( USEMUMPS )
    message(" USEMUMPS Enabled")
    # Enable USEMUMPS
    set(GETFEM_MUMPS,1)
    set(GMM_MUMPS,1)
endif( USEMUMPS )
if( USEOCTAVE )
    message(" USEOCTAVE Enabled")
    # Enable USEOCTAVE
    set(GETFEM_BUILDOCTAVE,1)
    set(GMM_BUILDOCTAVE,1)
endif( USEOCTAVE )
if( USEPYTHON )
    message(" USEPYTHON Enabled")
    # Enable USEPYTHON
    set(GETFEM_BUILDPYTHON,1)
    set(GMM_BUILDPYTHON,1)
endif( USEPYTHON )
if( USEQHULL )
    message(" USEQHULL Enabled")
    # Enable USEQHULL
    set(GETFEM_QHULL,1)
    set(GMM_QHULL,1)
endif( USEQHULL )

if(NOT PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)
  # Git auto-ignore out-of-source build directory
  file(GENERATE OUTPUT .gitignore CONTENT "*")
endif()

find_package(Perl REQUIRED)

configure_file(getfem_config.h.cmake getfem/getfem_arch_config.h)
configure_file(gmm_config.h.cmake gmm/gmm_arch_config.h)

# Setting the include directory for the application to find config.h
include_directories( ${CMAKE_BINARY_DIR} )
include_directories( ${CMAKE_SOURCE_DIR} )

# Since we have created a config.h add a global define for it
add_definitions( "-DHAVE_CONFIG_H" )

#add_subdirectory( m4 )
add_subdirectory( cubature )
add_subdirectory( src )
include_directories( ${CMAKE_SOURCE_DIR}/src ) # LD WHY the include inside subdir is not enough ??
add_subdirectory( tests )
add_subdirectory( interface )
#add_subdirectory( contrib ) # LD compile error, to be checked
#add_subdirectory( bin )
add_subdirectory( doc )