# Autogenerated by auto2cmake on 2022-07-27 21:08:01

# Options

cmake_minimum_required(VERSION 2.8)

project(GetFem)

cmake_policy(SET CMP0037 NEW)

# Option to Enable AC_PYTHON_MPI4PY
option( AC_PYTHON_MPI4PY "Enable AC_PYTHON_MPI4PY" OFF )

# Option to the 64 bits integer blas and lapack support
option( BLAS64_SUPPORT "the 64 bits integer blas and lapack support" OFF )

# Option to the use of the blas call for basic algebra routines.
option( BLAS_INTERFACE "the use of the blas call for basic algebra routines." OFF )

# Option to the use of the qd library (some computation will be done with double-double precision, useful for high order FEMs)
option( DD "the use of the qd library (some computation will be done with double-double precision, useful for high order FEMs)" OFF )

# Option to experimental parts of the library
option( EXPERIMENTAL "experimental parts of the library" OFF )

# Option to Enable HAVE_VENDOR_BLAS
option( HAVE_VENDOR_BLAS "Enable HAVE_VENDOR_BLAS" OFF )

# Option to on/off matlab support
option( MATLAB "on/off matlab support" OFF )

# Option to Enable MATLAB_COM_EXT
option( MATLAB_COM_EXT "Enable MATLAB_COM_EXT" OFF )

# Option to use of RPCs for matlab interface
option( MATLAB_RPC "use of RPCs for matlab interface" OFF )

# Option to the use of the METIS library.
option( METIS "the use of the METIS library." OFF )

# Option to openblas to be multithreaded
option( MULTITHREAD_BLAS "openblas to be multithreaded" OFF )

# Option to the use of the (sequential) MUMPS library. A direct solver for large sparse linear systems.
option( MUMPS "the use of the (sequential) MUMPS library. A direct solver for large sparse linear systems." OFF )

# Option to on/off octave support
option( OCTAVE "on/off octave support" OFF )

# Option to Enable OCTAVE_COM_EXT
option( OCTAVE_COM_EXT "Enable OCTAVE_COM_EXT" OFF )

# Option to the multihreaded version of GetFEM
option( OPENMP "the multihreaded version of GetFEM" OFF )

# Option to the parallel version of GetFEM (use MPI and METIS)
option( PARALEVEL "the parallel version of GetFEM (use MPI and METIS)" OFF )

# Option to the use of the parrallel MUMPS library. A direct solver for large sparse linear systems.
option( PAR_MUMPS "the use of the parrallel MUMPS library. A direct solver for large sparse linear systems." OFF )

# Option to on/off python support
option( PYTHON "on/off python support" OFF )

# Option to the use of the qd library (some computation will be done with quad-double precision, useful for high order FEMs)
option( QD "the use of the qd library (some computation will be done with quad-double precision, useful for high order FEMs)" OFF )

# Option to the use of the qhull library (required for generation of non regular meshes)
option( QHULL "the use of the qhull library (required for generation of non regular meshes)" OFF )

# Option to on/off SuperLU support
option( SUPERLU "on/off SuperLU support" OFF )

# Option to Enable USEMATLAB
option( USEMATLAB "Enable USEMATLAB" OFF )

# Option to Enable USEMETIS
option( USEMETIS "Enable USEMETIS" OFF )

# Option to Enable USEMUMPS
option( USEMUMPS "Enable USEMUMPS" OFF )

# Option to Enable USEOCTAVE
option( USEOCTAVE "Enable USEOCTAVE" OFF )

# Option to Enable USEPYTHON
option( USEPYTHON "Enable USEPYTHON" OFF )

# Option to Enable USEQHULL
option( USEQHULL "Enable USEQHULL" OFF )

# The lines below will generate the config.h based on the options above
# The file will be in the ${CMAKE_BINARY_DIR} location
set(CONFIG_H ${CMAKE_BINARY_DIR}/config.h)
string(TIMESTAMP CURRENT_TIMESTAMP)
file(WRITE ${CONFIG_H} "/* WARNING: This file is auto-generated by CMake on ${CURRENT_TIMESTAMP}. DO NOT EDIT!!! */\n\n")
if( AC_PYTHON_MPI4PY )
    message(" AC_PYTHON_MPI4PY Enabled")
    file(APPEND ${CONFIG_H} "/* Enable AC_PYTHON_MPI4PY */\n")
    file(APPEND ${CONFIG_H} "#define BUILDPYTHONPAR \n\n")
endif( AC_PYTHON_MPI4PY )
if( BLAS64_SUPPORT )
    message(" BLAS64_SUPPORT Enabled")
    file(APPEND ${CONFIG_H} "/* the 64 bits integer blas and lapack support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_BLAS64_SUPPORT \n\n")
endif( BLAS64_SUPPORT )
if( BLAS_INTERFACE )
    message(" BLAS_INTERFACE Enabled")
    file(APPEND ${CONFIG_H} "/* the use of the blas call for basic algebra routines. */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_BLAS_INTERFACE \n\n")
endif( BLAS_INTERFACE )
if( DD )
    message(" DD Enabled")
    file(APPEND ${CONFIG_H} "/* the use of the qd library some computation will be done with double-double precision useful for high order FEMs */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_DD \n\n")
endif( DD )
if( EXPERIMENTAL )
    message(" EXPERIMENTAL Enabled")
    file(APPEND ${CONFIG_H} "/* experimental parts of the library */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_EXPERIMENTAL \n\n")
endif( EXPERIMENTAL )
if( HAVE_VENDOR_BLAS )
    message(" HAVE_VENDOR_BLAS Enabled")
    file(APPEND ${CONFIG_H} "/* Enable HAVE_VENDOR_BLAS */\n")
    file(APPEND ${CONFIG_H} "#define USEBLASLITE \n\n")
endif( HAVE_VENDOR_BLAS )
if( MATLAB )
    message(" MATLAB Enabled")
    file(APPEND ${CONFIG_H} "/* on/off matlab support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_MATLAB \n\n")
endif( MATLAB )
if( MATLAB_COM_EXT )
    message(" MATLAB_COM_EXT Enabled")
    file(APPEND ${CONFIG_H} "/* Enable MATLAB_COM_EXT */\n")
    file(APPEND ${CONFIG_H} "#define USE_MINGW_MEX \n\n")
endif( MATLAB_COM_EXT )
if( MATLAB_RPC )
    message(" MATLAB_RPC Enabled")
    file(APPEND ${CONFIG_H} "/* use of RPCs for matlab interface */\n")
    file(APPEND ${CONFIG_H} "#define BUILDMEXRPC \n\n")
endif( MATLAB_RPC )
if( METIS )
    message(" METIS Enabled")
    file(APPEND ${CONFIG_H} "/* the use of the METIS library. */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_METIS \n\n")
endif( METIS )
if( MULTITHREAD_BLAS )
    message(" MULTITHREAD_BLAS Enabled")
    file(APPEND ${CONFIG_H} "/* openblas to be multithreaded */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_MULTITHREAD_BLAS \n\n")
endif( MULTITHREAD_BLAS )
if( MUMPS )
    message(" MUMPS Enabled")
    file(APPEND ${CONFIG_H} "/* the use of the sequential MUMPS library. A direct solver for large sparse linear systems. */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_MUMPS \n\n")
endif( MUMPS )
if( OCTAVE )
    message(" OCTAVE Enabled")
    file(APPEND ${CONFIG_H} "/* on/off octave support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_OCTAVE \n\n")
endif( OCTAVE )
if( OCTAVE_COM_EXT )
    message(" OCTAVE_COM_EXT Enabled")
    file(APPEND ${CONFIG_H} "/* Enable OCTAVE_COM_EXT */\n")
    file(APPEND ${CONFIG_H} "#define USE_MINGW_OCTAVE \n\n")
endif( OCTAVE_COM_EXT )
if( OPENMP )
    message(" OPENMP Enabled")
    file(APPEND ${CONFIG_H} "/* the multihreaded version of GetFEM */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_OPENMP \n\n")
endif( OPENMP )
if( PARALEVEL )
    message(" PARALEVEL Enabled")
    file(APPEND ${CONFIG_H} "/* the parallel version of GetFEM use MPI and METIS */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_PARALEVEL \n\n")
endif( PARALEVEL )
if( PAR_MUMPS )
    message(" PAR_MUMPS Enabled")
    file(APPEND ${CONFIG_H} "/* the use of the parrallel MUMPS library. A direct solver for large sparse linear systems. */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_PAR_MUMPS \n\n")
endif( PAR_MUMPS )
if( PYTHON )
    message(" PYTHON Enabled")
    file(APPEND ${CONFIG_H} "/* on/off python support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_PYTHON \n\n")
endif( PYTHON )
if( QD )
    message(" QD Enabled")
    file(APPEND ${CONFIG_H} "/* the use of the qd library some computation will be done with quad-double precision useful for high order FEMs */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_QD \n\n")
endif( QD )
if( QHULL )
    message(" QHULL Enabled")
    file(APPEND ${CONFIG_H} "/* the use of the qhull library required for generation of non regular meshes */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_QHULL \n\n")
endif( QHULL )
if( SUPERLU )
    message(" SUPERLU Enabled")
    file(APPEND ${CONFIG_H} "/* on/off SuperLU support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_SUPERLU \n\n")
endif( SUPERLU )
if( USEMATLAB )
    message(" USEMATLAB Enabled")
    file(APPEND ${CONFIG_H} "/* Enable USEMATLAB */\n")
    file(APPEND ${CONFIG_H} "#define BUILDMEX \n\n")
endif( USEMATLAB )
if( USEMETIS )
    message(" USEMETIS Enabled")
    file(APPEND ${CONFIG_H} "/* Enable USEMETIS */\n")
    file(APPEND ${CONFIG_H} "#define METIS \n\n")
endif( USEMETIS )
if( USEMUMPS )
    message(" USEMUMPS Enabled")
    file(APPEND ${CONFIG_H} "/* Enable USEMUMPS */\n")
    file(APPEND ${CONFIG_H} "#define MUMPS \n\n")
endif( USEMUMPS )
if( USEOCTAVE )
    message(" USEOCTAVE Enabled")
    file(APPEND ${CONFIG_H} "/* Enable USEOCTAVE */\n")
    file(APPEND ${CONFIG_H} "#define BUILDOCTAVE \n\n")
endif( USEOCTAVE )
if( USEPYTHON )
    message(" USEPYTHON Enabled")
    file(APPEND ${CONFIG_H} "/* Enable USEPYTHON */\n")
    file(APPEND ${CONFIG_H} "#define BUILDPYTHON \n\n")
endif( USEPYTHON )
if( USEQHULL )
    message(" USEQHULL Enabled")
    file(APPEND ${CONFIG_H} "/* Enable USEQHULL */\n")
    file(APPEND ${CONFIG_H} "#define QHULL \n\n")
endif( USEQHULL )

find_package(Perl REQUIRED)

# Setting the include directory for the application to find config.h
include_directories( ${CMAKE_BINARY_DIR} )
# Since we have created a config.h add a global define for it
add_definitions( "-DHAVE_CONFIG_H" )
#add_subdirectory( m4 )
add_subdirectory( cubature )
add_subdirectory( superlu )
add_subdirectory( src )
add_subdirectory( tests )
add_subdirectory( interface )
add_subdirectory( contrib )
#add_subdirectory( bin )
add_subdirectory( doc )